# Play EngineIO config
play.engine-io {

  # The ping interval to use to send to clients. This is used both by clients
  # to determine how often they should ping, as well as by the socket-io
  # session server to determine how often it should check to see if a session
  # has timed out and to do other clean up tasks
  ping-interval = 25 seconds

  # The ping timeout. If a socket.io client can't get a response in this time,
  # it will consider the connection dead. Likewise, if the server doesn't
  # receive a ping in this time, it will consider the connection dead.
  ping-timeout = 60 seconds

  # The list of transports the server should advertise that it supports. The
  # two valid values are websocket and polling. Note that changing this list
  # won't actually disable the servers support for the transports, it will
  # just change whether the server will advertise these as available upgrades
  # to the client.
  transports = ["websocket", "polling"]

  # The name of the actor to create for the engine.io manager.
  actor-name = "engine.io"

  # The router name for the engine.io router. This path should correspond to
  # a configured router group, such as a cluster consistent hashing router.
  # The routees of that actor should be the path to the configured actor-name.
  # If null, no router group will be used, messages will be sent directly to
  # the engine.io manager actor.
  router-name = null

  # The role to start the engine.io actors on. Useful when using a consistent
  # hashing cluster router, to have engine.io sessions only run on some nodes.
  # This must match the cluster.use-role setting in the configured router. If
  # null, will start the actors on every node. This setting will have no
  # effect if router-name is null.
  use-role = null

}

# socket.io specific config
play.socket-io {

  # How long the client has to respond to an ack before the server will
  # forget about the ack. Since the server has to track all the ack
  # functions it sends, if the client doesn't ack them, then this will
  # result in the ack map growing indefinitely for a session. Consequently,
  # the server periodically cleans up all expired acks to avoid this.
  ack-deadline = 60 seconds

  # How often expired acks should be cleaned up. Expired acks will be checked
  # every this many acks that we send.
  ack-cleanup-every = 10
}

play.modules.enabled += "play.engineio.EngineIOModule"
play.modules.enabled += "play.socketio.SocketIOModule"

pekko.actor {
  serializers {
    play-engine-io = "play.engineio.EngineIOPekkoSerializer"
  }
  serialization-bindings {
    "play.engineio.EngineIOManagerActor$Connect" = play-engine-io
    "play.engineio.EngineIOManagerActor$Packets" = play-engine-io
    "play.engineio.EngineIOManagerActor$Retrieve" = play-engine-io
    "play.engineio.EngineIOManagerActor$Close" = play-engine-io
    "play.engineio.protocol.EngineIOEncodingException" = play-engine-io
    "play.engineio.UnknownSessionId" = play-engine-io
    "play.engineio.SessionClosed" = play-engine-io
  }
  serialization-identifiers {
    # "engine.io".hashCode
    "play.engineio.EngineIOPekkoSerializer" = 600604754
  }
}